{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","COLLECTION_NAME","AuthForm","useState","email","setEmail","password","setPassword","error","setError","newAccount","setNewAcount","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","faGoogle","faGithub","Tweet","tweetObj","isOwner","editting","setEditting","text","newTweet","setNewTweet","TEXT_DB_PATH","id","doc","update","onToggleEdit","onDeleteClick","window","confirm","delete","attachedURL","refFromURL","maxLength","autoFocus","src","alt","width","height","faPencilAlt","faTrash","TweetFactory","userObj","tweet","setTweet","attachedImg","setAttachedImg","imgInput","useRef","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","creatorId","createdAt","Date","now","collection","add","onClearImg","current","htmlFor","faPlus","accept","file","files","reader","FileReader","onloadend","result","readAsDataURL","style","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArr","docs","map","data","Navigation","to","faUser","displayName","Profile","refreshUser","newDisplayName","setDisplayName","history","useHistory","getMyTweets","useCallback","where","get","updateProfile","push","signOut","length","readOnly","AppRouter","isLoggedin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.207f342d.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\nexport const COLLECTION_NAME = \"tweetsCollection\";\nexport const TEXT_MAX_LENGTH = 120;\n","import { authService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [newAccount, setNewAcount] = useState(false);\n  const toggleAccount = () => setNewAcount((prev) => !prev);\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (newAccount) {\n        // create account\n        await authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        // log in\n        await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import { firebaseInstance, authService } from \"fbase\";\nimport React from \"react\";\nimport AuthForm from \"components/AuthForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  const onSocialClick = async (e) => {\n    let provider;\n    const {\n      target: { name },\n    } = e;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    await authService.signInWithPopup(provider);\n  };\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        className=\"authTweeter\"\n      />\n\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\n          Continue with GitHub <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  COLLECTION_NAME,\r\n  dbService,\r\n  storageService,\r\n  TEXT_MAX_LENGTH,\r\n} from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editting, setEditting] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  const TEXT_DB_PATH = `${COLLECTION_NAME}/${tweetObj.id}`;\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (tweetObj.text !== newTweet) {\r\n      await dbService.doc(TEXT_DB_PATH).update({\r\n        text: newTweet,\r\n      });\r\n    }\r\n    onToggleEdit();\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  const onToggleEdit = () => {\r\n    setEditting((prev) => !prev);\r\n  };\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure to delete it?\");\r\n    if (ok) {\r\n      await dbService.doc(TEXT_DB_PATH).delete();\r\n      // img 삭제 - URL에서 ref를 얻어 삭제\r\n      if (tweetObj.attachedURL !== \"\") {\r\n        await storageService.refFromURL(tweetObj.attachedURL).delete();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweet\">\r\n      {editting && isOwner ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              value={newTweet}\r\n              onChange={onChange}\r\n              maxLength={TEXT_MAX_LENGTH}\r\n              required\r\n              autoFocus\r\n              className=\"formInput\"\r\n            />\r\n            <span type=\"submit\" className=\"formBtn\">\r\n              Edit Done\r\n            </span>\r\n          </form>\r\n          <span\r\n            type=\"button\"\r\n            onClick={onToggleEdit}\r\n            className=\"formBtn cancelBtn\"\r\n          >\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <span>{tweetObj.text}</span>\r\n          {tweetObj.attachedURL && (\r\n            <img\r\n              src={tweetObj.attachedURL}\r\n              alt=\"user\"\r\n              width=\"50px\"\r\n              height=\"50px\"\r\n            />\r\n          )}\r\n          {isOwner && (\r\n            <div className=\"tweet__actions\">\r\n              <span onClick={onToggleEdit}>\r\n                <FontAwesomeIcon icon={faPencilAlt} className=\"colorBlue\" />\r\n              </span>\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} className=\"colorBlue\" />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React, { useRef, useState } from \"react\";\nimport {\n  dbService,\n  storageService,\n  COLLECTION_NAME,\n  TEXT_MAX_LENGTH,\n} from \"fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({ userObj }) => {\n  const [tweet, setTweet] = useState(\"\");\n  const [attachedImg, setAttachedImg] = useState(\"\");\n  const imgInput = useRef();\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (tweet === \"\") return;\n    let attachedURL = \"\";\n    if (attachedImg !== \"\") {\n      const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n      const response = await fileRef.putString(attachedImg, \"data_url\");\n      attachedURL = await response.ref.getDownloadURL();\n    }\n    const tweetObj = {\n      creatorId: userObj.uid,\n      text: tweet,\n      createdAt: Date.now(),\n      attachedURL,\n    };\n\n    // set Image upload first\n    await dbService.collection(COLLECTION_NAME).add(tweetObj);\n    setTweet(\"\");\n    onClearImg();\n  };\n\n  const onChange = (e) => {\n    setTweet(e.target.value);\n  };\n\n  const onFileChange = (e) => {\n    const {\n      target: { files },\n    } = e;\n    const file = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (e) => {\n      const {\n        target: { result },\n      } = e;\n      setAttachedImg(result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const onClearImg = () => {\n    setAttachedImg(\"\");\n    imgInput.current.value = null;\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          value={tweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={TEXT_MAX_LENGTH}\n          className=\"factoryInput__input\"\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photo</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        className=\"attachFile\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        ref={imgInput}\n      />\n      {attachedImg && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachedImg}\n            width=\"50px\"\n            height=\"50px\"\n            alt=\"userSelect\"\n            style={{ backgroundImage: attachedImg }}\n          />\n          <div onClick={onClearImg} className=\"factoryForm__clear\">\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default TweetFactory;\n","import Tweet from \"components/Tweet\";\r\nimport { dbService, COLLECTION_NAME } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dbService\r\n      .collection(COLLECTION_NAME)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const tweetArr = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTweets(tweetArr);\r\n      });\r\n    return () => {\r\n      setTweets([]);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj} />\r\n      {tweets.map((tweet) => {\r\n        return (\r\n          <Tweet\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid ? true : false}\r\n            key={tweet.id}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul className=\"nav\">\n      <li>\n        <Link to=\"/\" className=\"home\">\n          <FontAwesomeIcon\n            icon={faTwitter}\n            size=\"2x\"\n            className=\"home colorBlue\"\n          />\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/profile\" className=\"profile\">\n          <FontAwesomeIcon icon={faUser} size=\"2x\" className=\"user colorBlue\" />\n          {userObj.displayName && `${userObj.displayName}'s`} Profile\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import { authService, COLLECTION_NAME, dbService } from \"fbase\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const [tweets, setTweets] = useState([]);\n  const [newDisplayName, setDisplayName] = useState(\n    userObj.displayName ? userObj.displayName : \"\"\n  );\n  const history = useHistory();\n  const onLogOut = () => {\n    history.push(\"/\");\n    authService.signOut();\n  };\n\n  const getMyTweets = useCallback(async () => {\n    const tweetArr = await dbService\n      .collection(COLLECTION_NAME)\n      .where(\"creatorId\", \"==\", userObj.uid)\n      .orderBy(\"createdAt\", \"desc\")\n      .get();\n    tweetArr.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data(),\n      };\n    });\n    setTweets(tweetArr);\n  }, [userObj]);\n\n  useEffect(() => {\n    getMyTweets();\n  }, [getMyTweets]);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setDisplayName(value);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          type=\"text\"\n          onChange={onChange}\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" />\n      </form>\n      <span onClick={onLogOut} className=\"formBtn cancelBtn logOut\">\n        Log Out\n      </span>\n      {tweets.length !== 0 && (\n        <ul className=\"profile_tweetContainer\">\n          {tweets.docs.map((doc) => {\n            const { attachedURL, text } = doc.data();\n            return (\n              <li key={doc.id} className=\"tweet\">\n                {attachedURL && (\n                  <img\n                    src={attachedURL}\n                    alt=\"user\"\n                    width=\"50px\"\n                    height=\"50px\"\n                  />\n                )}\n                <input type=\"text\" value={text} readOnly />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\nexport default Profile;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Navigation from \"components/Navigation\";\nimport Profile from \"routes/Profile\";\n\nconst AppRouter = ({ refreshUser, isLoggedin, userObj }) => {\n  return (\n    <Router>\n      {isLoggedin && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedin ? (\n          <>\n            <div className=\"router_container\">\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth></Auth>\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj(user);\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    setUserObj({ ...authService.currentUser });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedin={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer className=\"footer\">\n        &copy; {new Date().getFullYear()} firebase-twitter\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}